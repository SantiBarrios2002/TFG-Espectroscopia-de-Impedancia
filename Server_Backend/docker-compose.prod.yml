version: '3.8'

services:
  # PostgreSQL Database (Production)
  postgres:
    image: postgres:15-alpine
    container_name: iot_postgres_prod
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-iot_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB:-iot_server}
    volumes:
      - postgres_prod_data:/var/lib/postgresql/data
    networks:
      - backend
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-iot_user} -d ${POSTGRES_DB:-iot_server}"]
      interval: 30s
      timeout: 10s
      retries: 3

  # MQTT Broker (Production)
  mosquitto:
    image: eclipse-mosquitto:2.0
    container_name: iot_mosquitto_prod
    ports:
      - "1883:1883"
      - "8883:8883"  # SSL/TLS port
    volumes:
      - ./docker/mosquitto.prod.conf:/mosquitto/config/mosquitto.conf
      - ./docker/certs:/mosquitto/certs
      - mosquitto_prod_data:/mosquitto/data
      - mosquitto_prod_logs:/mosquitto/log
    networks:
      - backend
    restart: unless-stopped

  # Redis (Production)
  redis:
    image: redis:7-alpine
    container_name: iot_redis_prod
    volumes:
      - redis_prod_data:/data
    networks:
      - backend
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD}
    healthcheck:
      test: ["CMD", "redis-cli", "--no-auth-warning", "-a", "${REDIS_PASSWORD}", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # FastAPI Application (Production)
  app:
    build:
      context: .
      dockerfile: docker/Dockerfile
    container_name: iot_fastapi_prod
    environment:
      - ENVIRONMENT=production
      - DEBUG=false
      - DATABASE_URL=postgresql+asyncpg://${POSTGRES_USER:-iot_user}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB:-iot_server}
      - MQTT_HOST=mosquitto
      - MQTT_PORT=1883
      - JWT_SECRET_KEY=${JWT_SECRET_KEY}
      - LOG_LEVEL=WARNING
    depends_on:
      postgres:
        condition: service_healthy
      mosquitto:
        condition: service_started
      redis:
        condition: service_healthy
    networks:
      - backend
      - frontend
    restart: unless-stopped
    deploy:
      replicas: 2
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: iot_nginx_prod
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./docker/nginx.prod.conf:/etc/nginx/nginx.conf
      - ./docker/certs:/etc/nginx/certs
      - nginx_logs:/var/log/nginx
    depends_on:
      - app
    networks:
      - frontend
    restart: unless-stopped

  # Monitoring - Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: iot_prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./docker/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    networks:
      - monitoring
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'

  # Monitoring - Grafana
  grafana:
    image: grafana/grafana:latest
    container_name: iot_grafana
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./docker/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./docker/grafana/datasources:/etc/grafana/provisioning/datasources
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
      - GF_USERS_ALLOW_SIGN_UP=false
    networks:
      - monitoring
    restart: unless-stopped

volumes:
  postgres_prod_data:
  mosquitto_prod_data:
  mosquitto_prod_logs:
  redis_prod_data:
  nginx_logs:
  prometheus_data:
  grafana_data:

networks:
  backend:
    driver: bridge
  frontend:
    driver: bridge  
  monitoring:
    driver: bridge