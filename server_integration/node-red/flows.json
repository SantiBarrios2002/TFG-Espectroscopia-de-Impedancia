[
  {
    "id": "mqtt_flow_tab",
    "type": "tab",
    "label": "EIS MQTT Processing",
    "disabled": false,
    "info": "Main flow for processing EIS measurement data from ESP32 devices to InfluxDB",
    "env": []
  },
  {
    "id": "mqtt_broker_in",
    "type": "mqtt in",
    "z": "mqtt_flow_tab",
    "name": "EIS Device Data",
    "topic": "eis/device/+/data/+",
    "qos": "1",
    "datatype": "json",
    "broker": "mqtt_broker_config",
    "nl": false,
    "rap": true,
    "rh": 0,
    "inputs": 0,
    "x": 140,
    "y": 180,
    "wires": [["json_parser", "debug_raw"]]
  },
  {
    "id": "mqtt_broker_status",
    "type": "mqtt in",
    "z": "mqtt_flow_tab",
    "name": "EIS Device Status",
    "topic": "eis/device/+/status/+",
    "qos": "1",
    "datatype": "json",
    "broker": "mqtt_broker_config",
    "nl": false,
    "rap": true,
    "rh": 0,
    "inputs": 0,
    "x": 140,
    "y": 240,
    "wires": [["status_processor", "debug_status"]]
  },
  {
    "id": "mqtt_broker_system",
    "type": "mqtt in",
    "z": "mqtt_flow_tab",
    "name": "EIS Device System",
    "topic": "eis/device/+/system/+",
    "qos": "1",
    "datatype": "json",
    "broker": "mqtt_broker_config",
    "nl": false,
    "rap": true,
    "rh": 0,
    "inputs": 0,
    "x": 140,
    "y": 300,
    "wires": [["system_processor", "debug_system"]]
  },
  {
    "id": "json_parser",
    "type": "json",
    "z": "mqtt_flow_tab",
    "name": "Parse JSON",
    "property": "payload",
    "action": "obj",
    "pretty": false,
    "x": 350,
    "y": 180,
    "wires": [["board_type_switch"]]
  },
  {
    "id": "board_type_switch",
    "type": "switch",
    "z": "mqtt_flow_tab",
    "name": "Board Type Router",
    "property": "payload.device_info.board_type",
    "propertyType": "msg",
    "rules": [
      {
        "t": "eq",
        "v": "AD5940",
        "vt": "str"
      },
      {
        "t": "eq",
        "v": "AD5941",
        "vt": "str"
      }
    ],
    "checkall": "true",
    "repair": false,
    "outputs": 2,
    "x": 520,
    "y": 180,
    "wires": [["ad5940_processor"], ["ad5941_processor"]]
  },
  {
    "id": "ad5940_processor",
    "type": "function",
    "z": "mqtt_flow_tab",
    "name": "AD5940 Data Processor",
    "func": "// Process AD5940 impedance measurement data\nconst device_id = msg.payload.device_info.device_id;\nconst measurement_id = msg.payload.measurement_id || 'unknown';\nconst timestamp = new Date(msg.payload.timestamp).getTime() * 1000000; // Convert to nanoseconds\nconst data = msg.payload.data;\n\n// Create InfluxDB line protocol format\nconst tags = {\n    device_id: device_id,\n    board_type: 'AD5940',\n    measurement_id: measurement_id,\n    measurement_type: 'impedance_sweep'\n};\n\nconst fields = {\n    frequency: data.frequency,\n    magnitude: data.magnitude,\n    phase: data.phase,\n    real: data.real || 0,\n    imaginary: data.imaginary || 0,\n    firmware_version: `\"${msg.payload.device_info.firmware_version || '1.0.0'}\"`\n};\n\n// Format for InfluxDB\nlet tagStr = Object.keys(tags)\n    .map(key => `${key}=${tags[key]}`)\n    .join(',');\n    \nlet fieldStr = Object.keys(fields)\n    .map(key => `${key}=${fields[key]}`)\n    .join(',');\n\nmsg.payload = `ad5940_impedance,${tagStr} ${fieldStr} ${timestamp}`;\nmsg.bucket = 'eis_measurements';\n\nreturn msg;",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 740,
    "y": 140,
    "wires": [["influxdb_write", "debug_ad5940"]]
  },
  {
    "id": "ad5941_processor",
    "type": "function",
    "z": "mqtt_flow_tab",
    "name": "AD5941 Data Processor",
    "func": "// Process AD5941 battery impedance measurement data\nconst device_id = msg.payload.device_info.device_id;\nconst measurement_id = msg.payload.measurement_id || 'unknown';\nconst timestamp = new Date(msg.payload.timestamp).getTime() * 1000000; // Convert to nanoseconds\nconst data = msg.payload.data;\n\n// Create InfluxDB line protocol format\nconst tags = {\n    device_id: device_id,\n    board_type: 'AD5941',\n    measurement_id: measurement_id,\n    measurement_type: 'battery_impedance',\n    precharge_state: data.precharge_state || 'BATTERY'\n};\n\nconst fields = {\n    frequency: data.frequency,\n    real: data.real,\n    imaginary: data.imaginary,\n    magnitude: data.magnitude || Math.sqrt(data.real*data.real + data.imaginary*data.imaginary),\n    phase: data.phase || Math.atan2(data.imaginary, data.real) * 180 / Math.PI,\n    firmware_version: `\"${msg.payload.device_info.firmware_version || '1.0.0'}\"`\n};\n\n// Format for InfluxDB\nlet tagStr = Object.keys(tags)\n    .map(key => `${key}=${tags[key]}`)\n    .join(',');\n    \nlet fieldStr = Object.keys(fields)\n    .map(key => `${key}=${fields[key]}`)\n    .join(',');\n\nmsg.payload = `ad5941_battery,${tagStr} ${fieldStr} ${timestamp}`;\nmsg.bucket = 'eis_measurements';\n\nreturn msg;",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 740,
    "y": 220,
    "wires": [["influxdb_write", "debug_ad5941"]]
  },
  {
    "id": "status_processor",
    "type": "function",
    "z": "mqtt_flow_tab",
    "name": "Status Data Processor",
    "func": "// Process board selection status messages\nconst device_id = msg.payload.device_info.device_id;\nconst timestamp = new Date(msg.payload.timestamp).getTime() * 1000000;\n\nif (msg.payload.status && msg.payload.selected_board) {\n    // Board selection status\n    const tags = {\n        device_id: device_id,\n        selected_board: msg.payload.selected_board,\n        status: msg.payload.status\n    };\n    \n    const fields = {\n        message: `\"${msg.payload.message || ''}\"`\n    };\n    \n    if (msg.payload.request_id) {\n        fields.request_id = `\"${msg.payload.request_id}\"`;\n    }\n    \n    if (msg.payload.device_info.firmware_version) {\n        fields.firmware_version = `\"${msg.payload.device_info.firmware_version}\"`;\n    }\n    \n    let tagStr = Object.keys(tags)\n        .map(key => `${key}=${tags[key]}`)\n        .join(',');\n        \n    let fieldStr = Object.keys(fields)\n        .map(key => `${key}=${fields[key]}`)\n        .join(',');\n    \n    msg.payload = `board_selection,${tagStr} ${fieldStr} ${timestamp}`;\n    msg.bucket = 'eis_system';\n    \n    return msg;\n}\n\nreturn null;",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 370,
    "y": 240,
    "wires": [["influxdb_write", "debug_status_processed"]]
  },
  {
    "id": "system_processor",
    "type": "function",
    "z": "mqtt_flow_tab",
    "name": "System Data Processor",
    "func": "// Process system status and heartbeat messages\nconst device_id = msg.payload.device_id;\nconst timestamp = new Date().getTime() * 1000000; // Use current time if not provided\n\nif (msg.payload.status === 'alive') {\n    // Heartbeat message\n    const tags = {\n        device_id: device_id,\n        system_state: 'idle' // Default state for heartbeat\n    };\n    \n    const fields = {\n        uptime_seconds: msg.payload.uptime || 0,\n        memory_free: msg.payload.free_heap || 0\n    };\n    \n    let tagStr = Object.keys(tags)\n        .map(key => `${key}=${tags[key]}`)\n        .join(',');\n        \n    let fieldStr = Object.keys(fields)\n        .map(key => `${key}=${fields[key]}`)\n        .join(',');\n    \n    msg.payload = `system_status,${tagStr} ${fieldStr} ${timestamp}`;\n    msg.bucket = 'eis_system';\n    \n    return msg;\n}\n\nif (msg.payload.message_type === 'error') {\n    // Error message\n    const tags = {\n        device_id: device_id,\n        error_code: msg.payload.error.code,\n        severity: msg.payload.error.severity\n    };\n    \n    const fields = {\n        error_message: `\"${msg.payload.error.message}\"`,\n        context: `\"${msg.payload.error.context || ''}\"`\n    };\n    \n    if (msg.payload.device_info && msg.payload.device_info.firmware_version) {\n        fields.firmware_version = `\"${msg.payload.device_info.firmware_version}\"`;\n    }\n    \n    let tagStr = Object.keys(tags)\n        .map(key => `${key}=${tags[key]}`)\n        .join(',');\n        \n    let fieldStr = Object.keys(fields)\n        .map(key => `${key}=${fields[key]}`)\n        .join(',');\n    \n    msg.payload = `system_errors,${tagStr} ${fieldStr} ${timestamp}`;\n    msg.bucket = 'eis_system';\n    \n    return msg;\n}\n\nreturn null;",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 370,
    "y": 300,
    "wires": [["influxdb_write", "debug_system_processed"]]
  },
  {
    "id": "influxdb_write",
    "type": "influxdb out",
    "z": "mqtt_flow_tab",
    "influxdb": "influxdb_config",
    "name": "Write to InfluxDB",
    "measurement": "",
    "precision": "ns",
    "retentionPolicy": "",
    "database": "",
    "precisionV18FluxV20": "ns",
    "retentionPolicyV18Flux": "",
    "org": "eis_project",
    "bucket": "eis_measurements",
    "x": 1020,
    "y": 220,
    "wires": []
  },
  {
    "id": "api_tab",
    "type": "tab",
    "label": "EIS REST API",
    "disabled": false,
    "info": "HTTP API endpoints for MATLAB dataset queries",
    "env": []
  },
  {
    "id": "api_datasets",
    "type": "http in",
    "z": "api_tab",
    "name": "GET /api/datasets",
    "url": "/api/datasets",
    "method": "get",
    "upload": false,
    "swaggerDoc": "",
    "x": 140,
    "y": 140,
    "wires": [["datasets_query"]]
  },
  {
    "id": "api_dataset_by_id",
    "type": "http in",
    "z": "api_tab",
    "name": "GET /api/dataset/:id",
    "url": "/api/dataset/:id",
    "method": "get",
    "upload": false,
    "swaggerDoc": "",
    "x": 140,
    "y": 200,
    "wires": [["dataset_by_id_query"]]
  },
  {
    "id": "api_device_datasets",
    "type": "http in",
    "z": "api_tab",
    "name": "GET /api/datasets/device/:device_id",
    "url": "/api/datasets/device/:device_id",
    "method": "get",
    "upload": false,
    "swaggerDoc": "",
    "x": 180,
    "y": 260,
    "wires": [["device_datasets_query"]]
  },
  {
    "id": "datasets_query",
    "type": "function",
    "z": "api_tab",
    "name": "Query All Datasets",
    "func": "// Query InfluxDB for available datasets\nconst query = `\nfrom(bucket: \"eis_measurements\")\n  |> range(start: -30d)\n  |> filter(fn: (r) => r._measurement == \"ad5940_impedance\" or r._measurement == \"ad5941_battery\")\n  |> group(columns: [\"device_id\", \"measurement_id\", \"board_type\"])\n  |> first()\n  |> keep(columns: [\"device_id\", \"measurement_id\", \"board_type\", \"_time\"])\n  |> rename(columns: {_time: \"timestamp\"})\n`;\n\nmsg.query = query;\nmsg.bucket = 'eis_measurements';\n\nreturn msg;",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 380,
    "y": 140,
    "wires": [["influxdb_query_datasets"]]
  },
  {
    "id": "dataset_by_id_query",
    "type": "function",
    "z": "api_tab",
    "name": "Query Dataset by ID",
    "func": "// Query specific measurement dataset by ID\nconst dataset_id = msg.req.params.id;\n\nconst query = `\nfrom(bucket: \"eis_measurements\")\n  |> range(start: -30d)\n  |> filter(fn: (r) => r.measurement_id == \"${dataset_id}\")\n  |> pivot(rowKey:[\"_time\"], columnKey: [\"_field\"], valueColumn: \"_value\")\n  |> sort(columns: [\"frequency\"])\n`;\n\nmsg.query = query;\nmsg.bucket = 'eis_measurements';\nmsg.dataset_id = dataset_id;\n\nreturn msg;",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 390,
    "y": 200,
    "wires": [["influxdb_query_dataset"]]
  },
  {
    "id": "device_datasets_query",
    "type": "function",
    "z": "api_tab",
    "name": "Query Device Datasets",
    "func": "// Query datasets for specific device\nconst device_id = msg.req.params.device_id;\nconst start_date = msg.req.query.start || '-7d';\nconst end_date = msg.req.query.end || 'now()';\n\nconst query = `\nfrom(bucket: \"eis_measurements\")\n  |> range(start: ${start_date}, stop: ${end_date})\n  |> filter(fn: (r) => r.device_id == \"${device_id}\")\n  |> group(columns: [\"measurement_id\", \"board_type\"])\n  |> first()\n  |> keep(columns: [\"device_id\", \"measurement_id\", \"board_type\", \"_time\"])\n  |> rename(columns: {_time: \"timestamp\"})\n`;\n\nmsg.query = query;\nmsg.bucket = 'eis_measurements';\nmsg.device_id = device_id;\n\nreturn msg;",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 400,
    "y": 260,
    "wires": [["influxdb_query_device"]]
  },
  {
    "id": "influxdb_query_datasets",
    "type": "influxdb in",
    "z": "api_tab",
    "influxdb": "influxdb_config",
    "name": "Query Datasets",
    "query": "",
    "rawOutput": false,
    "precision": "ns",
    "retentionPolicy": "",
    "org": "eis_project",
    "x": 610,
    "y": 140,
    "wires": [["format_datasets_response"]]
  },
  {
    "id": "influxdb_query_dataset",
    "type": "influxdb in",
    "z": "api_tab",
    "influxdb": "influxdb_config",
    "name": "Query Single Dataset",
    "query": "",
    "rawOutput": false,
    "precision": "ns",
    "retentionPolicy": "",
    "org": "eis_project",
    "x": 620,
    "y": 200,
    "wires": [["format_dataset_response"]]
  },
  {
    "id": "influxdb_query_device",
    "type": "influxdb in",
    "z": "api_tab",
    "influxdb": "influxdb_config",
    "name": "Query Device Data",
    "query": "",
    "rawOutput": false,
    "precision": "ns",
    "retentionPolicy": "",
    "org": "eis_project",
    "x": 610,
    "y": 260,
    "wires": [["format_device_response"]]
  },
  {
    "id": "format_datasets_response",
    "type": "function",
    "z": "api_tab",
    "name": "Format Response",
    "func": "// Format datasets list response\nconst datasets = msg.payload || [];\n\nconst response = {\n    status: 'success',\n    total_datasets: datasets.length,\n    datasets: datasets.map(dataset => ({\n        dataset_id: dataset.measurement_id,\n        device_id: dataset.device_id,\n        board_type: dataset.board_type,\n        timestamp: dataset.timestamp,\n        name: `${dataset.board_type}_${dataset.measurement_id}`,\n        description: `${dataset.board_type} measurement from device ${dataset.device_id}`\n    })),\n    timestamp: new Date().toISOString()\n};\n\nmsg.payload = response;\n\nreturn msg;",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 820,
    "y": 140,
    "wires": [["http_response_datasets"]]
  },
  {
    "id": "format_dataset_response",
    "type": "function",
    "z": "api_tab",
    "name": "Format Dataset Response",
    "func": "// Format single dataset response\nconst data = msg.payload || [];\nconst dataset_id = msg.dataset_id;\n\nif (data.length === 0) {\n    msg.statusCode = 404;\n    msg.payload = {\n        status: 'error',\n        message: `Dataset ${dataset_id} not found`,\n        timestamp: new Date().toISOString()\n    };\n    return msg;\n}\n\nconst response = {\n    status: 'success',\n    dataset_id: dataset_id,\n    device_id: data[0].device_id,\n    board_type: data[0].board_type,\n    measurement_count: data.length,\n    data: data.map(point => ({\n        frequency: point.frequency,\n        magnitude: point.magnitude,\n        phase: point.phase,\n        real: point.real || 0,\n        imaginary: point.imaginary || 0,\n        timestamp: point._time\n    })),\n    metadata: {\n        firmware_version: data[0].firmware_version,\n        measurement_type: data[0]._measurement,\n        frequency_range: {\n            min: Math.min(...data.map(p => p.frequency)),\n            max: Math.max(...data.map(p => p.frequency))\n        }\n    },\n    timestamp: new Date().toISOString()\n};\n\nmsg.payload = response;\n\nreturn msg;",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 840,
    "y": 200,
    "wires": [["http_response_dataset"]]
  },
  {
    "id": "format_device_response",
    "type": "function",
    "z": "api_tab",
    "name": "Format Device Response",
    "func": "// Format device datasets response\nconst datasets = msg.payload || [];\nconst device_id = msg.device_id;\n\nconst response = {\n    status: 'success',\n    device_id: device_id,\n    total_datasets: datasets.length,\n    datasets: datasets.map(dataset => ({\n        dataset_id: dataset.measurement_id,\n        board_type: dataset.board_type,\n        timestamp: dataset.timestamp,\n        name: `${dataset.board_type}_${dataset.measurement_id}`\n    })),\n    timestamp: new Date().toISOString()\n};\n\nmsg.payload = response;\n\nreturn msg;",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 830,
    "y": 260,
    "wires": [["http_response_device"]]
  },
  {
    "id": "http_response_datasets",
    "type": "http response",
    "z": "api_tab",
    "name": "Response",
    "statusCode": "",
    "headers": {
      "Content-Type": "application/json"
    },
    "x": 1020,
    "y": 140,
    "wires": []
  },
  {
    "id": "http_response_dataset",
    "type": "http response",
    "z": "api_tab",
    "name": "Response",
    "statusCode": "",
    "headers": {
      "Content-Type": "application/json"
    },
    "x": 1020,
    "y": 200,
    "wires": []
  },
  {
    "id": "http_response_device",
    "type": "http response",
    "z": "api_tab",
    "name": "Response",
    "statusCode": "",
    "headers": {
      "Content-Type": "application/json"
    },
    "x": 1020,
    "y": 260,
    "wires": []
  },
  {
    "id": "debug_raw",
    "type": "debug",
    "z": "mqtt_flow_tab",
    "name": "Raw MQTT Data",
    "active": false,
    "tosidebar": true,
    "console": false,
    "tostatus": false,
    "complete": "payload",
    "targetType": "msg",
    "statusVal": "",
    "statusType": "auto",
    "x": 360,
    "y": 120,
    "wires": []
  },
  {
    "id": "debug_status",
    "type": "debug",
    "z": "mqtt_flow_tab",
    "name": "Status Debug",
    "active": false,
    "tosidebar": true,
    "console": false,
    "tostatus": false,
    "complete": "payload",
    "targetType": "msg",
    "statusVal": "",
    "statusType": "auto",
    "x": 360,
    "y": 280,
    "wires": []
  },
  {
    "id": "debug_system",
    "type": "debug",
    "z": "mqtt_flow_tab",
    "name": "System Debug",
    "active": false,
    "tosidebar": true,
    "console": false,
    "tostatus": false,
    "complete": "payload",
    "targetType": "msg",
    "statusVal": "",
    "statusType": "auto",
    "x": 360,
    "y": 340,
    "wires": []
  },
  {
    "id": "debug_ad5940",
    "type": "debug",
    "z": "mqtt_flow_tab",
    "name": "AD5940 Processed",
    "active": false,
    "tosidebar": true,
    "console": false,
    "tostatus": false,
    "complete": "payload",
    "targetType": "msg",
    "statusVal": "",
    "statusType": "auto",
    "x": 970,
    "y": 140,
    "wires": []
  },
  {
    "id": "debug_ad5941",
    "type": "debug",
    "z": "mqtt_flow_tab",
    "name": "AD5941 Processed",
    "active": false,
    "tosidebar": true,
    "console": false,
    "tostatus": false,
    "complete": "payload",
    "targetType": "msg",
    "statusVal": "",
    "statusType": "auto",
    "x": 970,
    "y": 220,
    "wires": []
  },
  {
    "id": "debug_status_processed",
    "type": "debug",
    "z": "mqtt_flow_tab",
    "name": "Status Processed",
    "active": false,
    "tosidebar": true,
    "console": false,
    "tostatus": false,
    "complete": "payload",
    "targetType": "msg",
    "statusVal": "",
    "statusType": "auto",
    "x": 580,
    "y": 280,
    "wires": []
  },
  {
    "id": "debug_system_processed",
    "type": "debug",
    "z": "mqtt_flow_tab",
    "name": "System Processed",
    "active": false,
    "tosidebar": true,
    "console": false,
    "tostatus": false,
    "complete": "payload",
    "targetType": "msg",
    "statusVal": "",
    "statusType": "auto",
    "x": 580,
    "y": 340,
    "wires": []
  },
  {
    "id": "mqtt_broker_config",
    "type": "mqtt-broker",
    "name": "EIS MQTT Broker",
    "broker": "192.168.1.100",
    "port": "1883",
    "clientid": "nodered_eis_processor",
    "autoConnect": true,
    "usetls": false,
    "compatmode": false,
    "protocolVersion": "4",
    "keepalive": "60",
    "cleansession": true,
    "birthTopic": "",
    "birthQos": "0",
    "birthPayload": "",
    "birthMsg": {},
    "closeTopic": "",
    "closeQos": "0",
    "closePayload": "",
    "closeMsg": {},
    "willTopic": "",
    "willQos": "0",
    "willPayload": "",
    "willMsg": {},
    "userProps": "",
    "sessionExpiry": ""
  },
  {
    "id": "influxdb_config",
    "type": "influxdb",
    "hostname": "192.168.1.100",
    "port": "8086",
    "protocol": "http",
    "database": "eis_measurements",
    "name": "EIS InfluxDB",
    "usetls": false,
    "tls": "",
    "influxdbVersion": "2.0",
    "url": "http://192.168.1.100:8086",
    "rejectUnauthorized": true
  }
]